// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// model User {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   // Other fields
// }
model User {
  id            Int    @id @default(sequence())
  email         String @unique
  name          String
  password      String
  surname       String
  rut           String @unique
  role          Role
  CaseStudent   Case[] @relation(name: "student") //Un estudiante tiene muchos casos
  CaseProfessor Case[] @relation(name: "professor") // un profesor tiene mucho casos
  CaseVR        Case[] @relation(name: "VR") // un profesor tiene mucho casos
  NRCProfessor  NRC[]  @relation(name: "professorNRC") // Un profesor tiene muchos NRC
  NRCStudent    NRC[]  @relation(name: "studentNRC") // Un estudainte tiene muchos NRC
}

enum Role {
  STUDENT
  PROFESSOR
  VR
}

// Modelo NRC

model NRC {
  id          Int     @id @default(sequence())
  code        Int
  name        String
  period      Int
  professor   User?   @relation(name: "professorNRC", fields: [professorId], references: [id])
  professorId Int?
  case        Case[] //Un caso tiene muchos NRC
  student     User[]  @relation(name: "studentNRC") //Un nrc tiene muchos estudiantes
  campus      Campus? @relation(fields: [campusId], references: [id]) //Un nrc tiene un campus
  campusId    Int?
}

model Case {
  id          Int       @id @default(sequence())
  createdAt   DateTime  @default(now())
  title       String
  nrc         NRC       @relation(fields: [nrcId], references: [id]) //Un caso tiene 1 nrc
  nrcId       Int
  description String
  files       String?
  response    String?
  campus      Campus?   @relation(fields: [campusId], references: [id]) //Un Caso tiene un campus
  campusId    Int? //se almacena el id del campus
  status      Status?   @default(UNSOLVED)
  student     User?     @relation(name: "student", fields: [studentId], references: [id]) //Un caso tiene un estudiante
  studentId   Int?
  professor   User?     @relation(name: "professor", fields: [professorId], references: [id]) // Un caso tiene un profesor
  professorId Int?
  VR          User?     @relation(name: "VR", fields: [VRId], references: [id])
  VRId        Int?
  respondedAt DateTime?
  dateTest    DateTime?
  vrResponse  String?

  //isApproved Boolean?
}

// 
model Campus {
  id   Int     @id @default(sequence())
  name String?
  case Case[] //Un campus tiene muchos casos
  nrc  NRC[] //Un campus tiene muchos NRC
}

enum Status {
  APPROVED
  REJECTED
  UNSOLVED
  SOLVED
}
